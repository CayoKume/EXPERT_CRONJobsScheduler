// <auto-generated />
using System;
using Infrastructure.AfterSale.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.AfterSale.Data.Migrations.SQLServer
{
    [DbContext(typeof(AfterSaleTreatedDbContext))]
    [Migration("20250530194956_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.AfterSale.Entities.Action", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(60)");

                    b.HasKey("id");

                    b.ToTable("AfterSaleActions", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Address", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("city")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("complement")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("lat")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("long")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("neighborhood")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("number")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("state")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("zip_code")
                        .HasColumnType("char(9)");

                    b.HasKey("id");

                    b.ToTable("AfterSaleAddresses", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Bank", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(60)");

                    b.HasKey("id");

                    b.ToTable("AfterSaleBanks", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Customer", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("address_id")
                        .HasColumnType("int");

                    b.Property<string>("contact_email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("document")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("first_name")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("last_name")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("phone")
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("shipping_address_id")
                        .HasColumnType("int");

                    b.Property<int?>("shipping_addressid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("shipping_address_id");

                    b.HasIndex("shipping_addressid");

                    b.ToTable("AfterSaleCustomers", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Ecommerce", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("address_id")
                        .HasColumnType("int");

                    b.Property<string>("app_name")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("brand_id")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("company_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("display_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("document")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ecommerce_group_id")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<bool?>("is_test")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<DateTime?>("last_order_report_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<bool?>("maintenance_mode_global")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<string>("oauth_client_id")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("phone")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("provider_id")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("registration_origin")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("segment")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("trade_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("url")
                        .HasColumnType("varchar(4000)");

                    b.Property<Guid?>("uuid")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Custom:ColumnTypeMapper", "UUID");

                    b.HasKey("id");

                    b.HasIndex("address_id");

                    b.ToTable("AfterSaleEcommerces", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.OrderTransactions", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("acquirer")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int?>("ecommerce_order_id")
                        .HasColumnType("int");

                    b.Property<string>("merchant_name")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("nsu")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("refund_id")
                        .HasColumnType("int");

                    b.Property<string>("tid")
                        .HasColumnType("varchar(60)");

                    b.Property<decimal?>("total_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("transaction_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("refund_id");

                    b.ToTable("AfterSaleOrderTransactions", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Parameters", b =>
                {
                    b.Property<string>("doc_company")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CNPJ_EMP");

                    b.Property<Guid?>("Token")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TOKEN");

                    b.HasKey("doc_company");

                    b.ToTable("Parametros_AfterSale", "general");

                    b.HasData(
                        new
                        {
                            doc_company = "38367316000199",
                            Token = new Guid("69ea80a0-0472-11ee-993e-37eecaae1115")
                        },
                        new
                        {
                            doc_company = "42538267000268",
                            Token = new Guid("56dfd210-0472-11ee-bfa0-99577f33d6f0")
                        });
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Product", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("comments")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("customer_retention_method_id")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("ecommerce_order_product_id")
                        .HasColumnType("int");

                    b.Property<string>("hash")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("invoice")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("motive_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("order_id")
                        .HasColumnType("int");

                    b.Property<string>("price")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("product_id")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("product_received_comment")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("protocol")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("qty")
                        .HasColumnType("int");

                    b.Property<int>("reasonid")
                        .HasColumnType("int");

                    b.Property<int?>("received_qty")
                        .HasColumnType("int");

                    b.Property<int?>("refund_id")
                        .HasColumnType("int");

                    b.Property<int?>("requested_qty")
                        .HasColumnType("int");

                    b.Property<string>("returned_invoice")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("reverse_action")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("reverse_id")
                        .HasColumnType("int");

                    b.Property<string>("selling_price")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("sku")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("weight")
                        .HasColumnType("varchar(60)");

                    b.HasKey("id");

                    b.HasIndex("reasonid");

                    b.HasIndex("refund_id");

                    b.HasIndex("reverse_id");

                    b.ToTable("AfterSaleProducts", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Reason", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("action")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("description")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("ecommerce_id")
                        .HasColumnType("int");

                    b.Property<string>("ord")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("reason_category_id")
                        .HasColumnType("varchar(60)");

                    b.Property<bool?>("should_approve")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<bool?>("show_product_grid")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("upload_image")
                        .HasColumnType("varchar(60)");

                    b.HasKey("id");

                    b.HasIndex("ecommerce_id");

                    b.ToTable("AfterSaleReasons", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Refund", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("action")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("bonus_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("bonus_amount_percent")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("can_edit_wire_transfer")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<string>("cashback_account")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<string>("customer_retention_method_id")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ecommerce_order_id")
                        .HasColumnType("int");

                    b.Property<string>("external_order_url")
                        .HasColumnType("varchar(4000)");

                    b.Property<bool?>("free_shipping")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<bool?>("has_wire_transfer_account")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<DateTime?>("last_status_history_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("order_id")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("received_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("received_raw_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("refunded_shipping_type")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("requested_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("requested_raw_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("requested_shipping_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("requested_total_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("reverse_id")
                        .HasColumnType("int");

                    b.Property<int>("reverseid")
                        .HasColumnType("int");

                    b.Property<string>("shipping_method")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("should_ask_voucher_code")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<int>("status_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("total_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("voucher_giftcard_id")
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.HasIndex("reverse_id");

                    b.HasIndex("reverseid");

                    b.HasIndex("status_id");

                    b.HasIndex("voucher_giftcard_id");

                    b.ToTable("AfterSaleRefunds", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Reverse", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("billing_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("billing_item_id")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("brand_id")
                        .HasColumnType("int");

                    b.Property<bool?>("can_generate_voucher")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<bool?>("can_send_correction_letter")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<string>("collect_scheduling_link")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("correction_letter_link")
                        .HasColumnType("varchar(4000)");

                    b.Property<bool?>("could_cancel")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<bool?>("courier_collect")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<int?>("courier_contract_id")
                        .HasColumnType("int");

                    b.Property<string>("courier_service_type")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("customer_id")
                        .HasColumnType("int");

                    b.Property<string>("customer_url")
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("destination_seller_id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("dot_id")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ecommerce_id")
                        .HasColumnType("int");

                    b.Property<int?>("ecommerce_order_id")
                        .HasColumnType("int");

                    b.Property<string>("external_source")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("freight_by_customer")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<int?>("invoice")
                        .HasColumnType("int");

                    b.Property<bool?>("is_erased")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<bool?>("is_generic_courier")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<bool?>("is_store_seller_contract")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<string>("locker_reference")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("must_treat_refund")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<string>("order_id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("order_sequence_number")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("origin")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("origin_seller_id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("partner_store")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("posting_card")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("refunds_count")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("returned_invoice")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("reverse_type")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("reverse_type_name")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("service_type_change")
                        .HasColumnType("int");

                    b.Property<string>("service_type_changed")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("skip_process_step")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<int?>("status_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("store_expire_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int?>("store_id")
                        .HasColumnType("int");

                    b.Property<string>("timeline_url")
                        .HasColumnType("varchar(4000)");

                    b.Property<decimal?>("total_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("tracking_error")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.HasIndex("ecommerce_id");

                    b.HasIndex("status_id");

                    b.ToTable("AfterSaleReverses", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Status", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(60)");

                    b.HasKey("id");

                    b.ToTable("AfterSaleStatus", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.StatusHistories", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("comments")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int?>("reverse_id")
                        .HasColumnType("int");

                    b.Property<int?>("status_id")
                        .HasColumnType("int");

                    b.Property<int>("statusid")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("reverse_id");

                    b.HasIndex("statusid");

                    b.ToTable("AfterSaleStatusHistories", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.TotalAmountHistories", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int>("refund_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("total_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("typeid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("refund_id")
                        .IsUnique();

                    b.HasIndex("typeid");

                    b.ToTable("AfterSaleTotalAmountHistories", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Tracking", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("authorization_code")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("collect_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int?>("courier_contract_id")
                        .HasColumnType("int");

                    b.Property<string>("courier_name")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("cte")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("delivery_deadline")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("expire_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("extra_fields")
                        .HasColumnType("varchar(60)");

                    b.Property<bool?>("is_change_collect_to_post")
                        .HasColumnType("bit")
                        .HasAnnotation("Custom:ColumnTypeMapper", "Bool");

                    b.Property<string>("message")
                        .HasColumnType("varchar(60)");

                    b.Property<decimal?>("package_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("qr_code")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("requested_collect_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int?>("reverse_id")
                        .HasColumnType("int");

                    b.Property<string>("service_type")
                        .HasColumnType("varchar(60)");

                    b.Property<decimal?>("shipping_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("status")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("status_updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("tracking_code")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("tracking_url")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.HasKey("id");

                    b.HasIndex("reverse_id")
                        .IsUnique()
                        .HasFilter("[reverse_id] IS NOT NULL");

                    b.ToTable("AfterSaleTrackings", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.TrackingHistory", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("message")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("status")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("status_updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<int?>("tracking_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.HasKey("id");

                    b.HasIndex("tracking_id");

                    b.ToTable("AfterSaleTrackingHistories", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Transportations", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasColumnType("varchar(60)");

                    b.HasKey("id");

                    b.ToTable("AfterSaleTransportations", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Type", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(60)");

                    b.HasKey("id");

                    b.ToTable("AfterSaleTypes", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Voucher", b =>
                {
                    b.Property<string>("redemption_code")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("expiring_date")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Custom:ColumnTypeMapper", "DateTime");

                    b.Property<string>("giftcard_id")
                        .HasColumnType("varchar(50)");

                    b.HasKey("redemption_code");

                    b.ToTable("AfterSaleVouchers", "general");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Customer", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Address", "address")
                        .WithMany()
                        .HasForeignKey("shipping_address_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.AfterSale.Entities.Address", "shipping_address")
                        .WithMany()
                        .HasForeignKey("shipping_addressid");

                    b.Navigation("address");

                    b.Navigation("shipping_address");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Ecommerce", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Address", "address")
                        .WithMany()
                        .HasForeignKey("address_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("address");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.OrderTransactions", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Refund", null)
                        .WithMany("order_transactions")
                        .HasForeignKey("refund_id");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Product", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Reason", "reason")
                        .WithMany()
                        .HasForeignKey("reasonid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AfterSale.Entities.Refund", null)
                        .WithMany("products")
                        .HasForeignKey("refund_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.AfterSale.Entities.Reverse", null)
                        .WithMany("products")
                        .HasForeignKey("reverse_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("reason");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Reason", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Ecommerce", null)
                        .WithMany("reasons")
                        .HasForeignKey("ecommerce_id")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Refund", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.AfterSale.Entities.Reverse", null)
                        .WithMany("refunds")
                        .HasForeignKey("reverse_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.AfterSale.Entities.StatusHistories", "status_histories")
                        .WithMany()
                        .HasForeignKey("reverse_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.AfterSale.Entities.Reverse", "reverse")
                        .WithMany()
                        .HasForeignKey("reverseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AfterSale.Entities.Status", "status")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.AfterSale.Entities.Voucher", "voucher")
                        .WithMany()
                        .HasForeignKey("voucher_giftcard_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("customer");

                    b.Navigation("reverse");

                    b.Navigation("status");

                    b.Navigation("status_histories");

                    b.Navigation("voucher");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Reverse", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.AfterSale.Entities.Ecommerce", "ecommerce")
                        .WithMany()
                        .HasForeignKey("ecommerce_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.AfterSale.Entities.Status", "status")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("customer");

                    b.Navigation("ecommerce");

                    b.Navigation("status");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.StatusHistories", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Reverse", null)
                        .WithMany("status_histories")
                        .HasForeignKey("reverse_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.AfterSale.Entities.Status", "status")
                        .WithMany()
                        .HasForeignKey("statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.TotalAmountHistories", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Refund", "Refund")
                        .WithOne("total_amount_histories")
                        .HasForeignKey("Domain.AfterSale.Entities.TotalAmountHistories", "refund_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.AfterSale.Entities.Type", "type")
                        .WithMany()
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Refund");

                    b.Navigation("type");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Tracking", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Reverse", "reverse")
                        .WithOne("tracking")
                        .HasForeignKey("Domain.AfterSale.Entities.Tracking", "reverse_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("reverse");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.TrackingHistory", b =>
                {
                    b.HasOne("Domain.AfterSale.Entities.Reverse", null)
                        .WithMany("tracking_history")
                        .HasForeignKey("tracking_id")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Ecommerce", b =>
                {
                    b.Navigation("reasons");
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Refund", b =>
                {
                    b.Navigation("order_transactions");

                    b.Navigation("products");

                    b.Navigation("total_amount_histories")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AfterSale.Entities.Reverse", b =>
                {
                    b.Navigation("products");

                    b.Navigation("refunds");

                    b.Navigation("status_histories");

                    b.Navigation("tracking");

                    b.Navigation("tracking_history");
                });
#pragma warning restore 612, 618
        }
    }
}
